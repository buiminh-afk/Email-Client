#include <iostream>
#include <vector>
#include <string>
#include <mimetic/mimetic.h>

using namespace std;
using namespace mimetic;

struct Email {
    vector<string> to;
    string from;
    vector<string> cc;
    vector<string> bcc;
    string subject;
    string content;
    bool hasAttachment;
    int numAttachments;
    vector<string> files;
};

Email parseEmail(const string& emailString) {
    Email email;

    try {
        MimeEntity entity;
        entity.load(emailString);

        // Extract recipients (To, Cc, Bcc)
        for (const auto& recipient : entity.header().to()) {
            email.to.push_back(recipient);
        }
        for (const auto& recipient : entity.header().cc()) {
            email.cc.push_back(recipient);
        }
        for (const auto& recipient : entity.header().bcc()) {
            email.bcc.push_back(recipient);
        }

        // Extract other fields
        email.from = entity.header().from().mailbox();
        email.subject = entity.header().subject();
        email.content = entity.body().str();
        email.hasAttachment = !entity.body().attachments().empty();
        email.numAttachments = static_cast<int>(entity.body().attachments().size());

        // Extract attachment filenames
        for (const auto& attachment : entity.body().attachments()) {
            email.files.push_back(attachment->filename());
        }
    } catch (const exception& e) {
        cerr << "Error parsing email: " << e.what() << endl;
    }

    return email;
}

int main() {
    // Example email string
    string emailString = R"(
        From: sender@example.com
        To: recipient1@example.com, recipient2@example.com
        Cc: cc1@example.com, cc2@example.com
        Subject: Hello World
        Content-Type: text/plain

        This is the email content.
    )";

    Email parsedEmail = parseEmail(emailString);

    // Print parsed email fields
    cout << "From: " << parsedEmail.from << endl;
    cout << "To: ";
    for (const auto& recipient : parsedEmail.to) {
        cout << recipient << ", ";
    }
    cout << endl;
    cout << "Cc: ";
    for (const auto& recipient : parsedEmail.cc) {
        cout << recipient << ", ";
    }
    cout << endl;
    cout << "Subject: " << parsedEmail.subject << endl;
    cout << "Content: " << parsedEmail.content << endl;
    cout << "Has Attachment: " << (parsedEmail.hasAttachment ? "Yes" : "No") << endl;
    cout << "Number of Attachments: " << parsedEmail.numAttachments << endl;
    cout << "Attachment Files: ";
    for (const auto& file : parsedEmail.files) {
        cout << file << ", ";
    }
    cout << endl;

    return 0;
}